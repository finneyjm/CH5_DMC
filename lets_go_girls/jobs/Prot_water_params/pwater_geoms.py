ang2bohr = 1.e-10/5.291772106712e-11


# trimer = [[0.00000,        1.67720,        0.53729],
#           [-0.87302,        0.35992,        0.01707],
#           [0.87302,        0.35993,        0.01707],
#           [0.00000,        0.91527,       -0.05817],
#           [2.56267,       -0.75858,        0.76451],
#           [2.70113,       -0.40578,       -0.73813],
#           [2.07091,       -0.46191,       -0.00993],
#           [-2.70115,       -0.40575,       -0.73811],
#           [-2.56265,       -0.75862,        0.76451],
#           [-2.07092,       -0.46190,       -0.00993]]

trimer = [[1.822639226956,  0.000000000283,  0.000000000000],
          [0.300407646428,  -0.914198709660,  0.000000000000],
          [0.300407645812,  0.914198709862,  0.000000000000],
          [0.840815416177,  0.000000000283,  0.000000000000],
          [-0.714399465504, 2.673546910582, -0.785835530027],
          [-0.714326750385, 2.673421907097, 0.785943106958],
          [-0.420407708818, 2.168150028133, 0.000000000000],
          [-0.714326748587, -2.673421907578, -0.785943106958],
          [-0.714399463705, -2.673546911063, 0.785835530027],
          [-0.420407707359,  -2.168150028415,  -0.000000000000]]

# tetramer = [[-0.31106354,  -0.91215572,  -0.20184621],
#             [0.95094197,   0.18695800,  -0.20259538],
#             [-0.63272209,   0.72926470,  -0.20069859],
#             [0.00253217,   0.00164013,  -0.47227522],
#             [-1.96589559,   2.46292466,  -0.54312627],
#             [-2.13630186,   1.99106023,   0.90604777],
#             [-1.55099190,   1.94067311,   0.14704161],
#             [-1.18003749,  -2.92157144,  -0.54090532],
#             [-0.65410291,  -2.84939169,   0.89772271],
#             [-0.91203521,  -2.30896272,   0.14764850],
#             [2.79828182,   0.87002791,   0.89281564],
#             [3.12620054,   0.43432898,  -0.54032031],
#             [2.46079102,   0.36718848,   0.14815394]]

tetramer = [[1.030703806723,  -0.000000001370,  0.000000000000],
            [-0.515351904550,  -0.892615679713,  -0.000000000000],
            [-0.515351902175,  0.892615681087,  -0.000000000000],
            [-0.000000000001,  0.000000000001,  0.000000000000],
            [-1.556584242874,  -2.696082986637,  -0.781280977010],
            [-1.556438007664,  -2.695829699825,  0.781501264494],
            [-1.262240877623,  -2.186265324717,  -0.000000000000],
            [3.113168478575,  -0.000000004143,  -0.781280977010],
            [3.112876008157,  -0.000000004142,  0.781501264494],
            [2.524481749430,  -0.000000003359,  -0.000000000000],
            [-1.556584235700,  2.696082990777,  -0.781280977010],
            [-1.556438000492,  2.695829703965,  0.781501264494],
            [-1.262240871806,  2.186265328075,  -0.000000000000]]

tetramer = [[5.67943481e+00,  1.51537030e+00, -6.60432635e-01],
            [3.98008664e+00,  4.18252753e+00, -6.62185889e-01],
            [2.52170063e+00,  1.37547514e+00, -6.57787713e-01],
            [4.05984479e+00,  2.35803439e+00, -1.17142315e+00],
            [-1.09270339e+00, -6.28883234e-01, -1.30393783e+00],
            [-2.58413083e-01, -1.07931315e+00,  1.43458401e+00],
            [0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
            [9.19022414e+00, -6.73229684e-01, -1.30118342e+00],
            [9.20349754e+00,  3.30464621e-01,  1.41721044e+00],
            [8.12091432e+00, -2.96631799e-16,  4.96205993e-16],
            [3.22296392e+00,  7.82706297e+00,  1.40715878e+00],
            [4.12891753e+00,  8.31684567e+00, -1.30130975e+00],
            [4.06760619e+00,  7.05479785e+00,  6.69415563e-16]]


dimer = [[0.000210, -0.040199, 0.000028],
         [-1.647488, 0.780819, -0.327399],
         [-1.688503, -0.439783, 0.676725],
         [-1.199788, -0.040085, -0.062851],
         [1.647240, 0.780469, 0.328402],
         [1.688077, -0.438127, -0.678047],
         [1.199846, -0.040312, 0.062887]]
import numpy as np
dimer2 = np.array([[2.254868053895938, 0.000000000000000, 0.000000000000000],
         [-2.254868053895938, 0.000000000000000, 0.000000000000000],
         [0.000000000000000, 0.000000000000000, 0.1235103451781876],
         [-3.013194720920241, 1.489183788836780, -0.7465980020137635],
         [-3.201587564645578, -0.4544810799466731, 1.498136372134866],
         [3.013194720920241, -1.489183788836780, -0.7465980020137635],
         [3.201587564645578, 0.4544810799466731, 1.498136372134866]])

dimer2 = dimer2[[3, 4, 2, 1, -2, -1, 0]]


monomer = [[0.93273984, -0.03166913, -0.23931206],
           [-0.43894472, 0.82361013, -0.23931163],
           [-0.49379696, -0.79194164, -0.23931138],
           [0.00000012, 0.00000004, 0.04523643]]

# monomer2 = [[-0.00032173,  -1.66883417,  -0.56979199],
#             [0.86680697,  -0.36416991,  -0.02964338],
#             [-0.86669085,  -0.36370215,  -0.02981743],
#             [-0.00008682,  -0.91448211,   0.02996010],
#             [22.55870573,   0.78106280,  -0.75977325],
#             [22.71587410,   0.37986377,   0.72158263],
#             [22.07903488,   0.45956205,   0.00727991]]

monomer2 = [[-0.00032173,  -1.66883417,  -0.56979199],
            [0.86680697,  -0.36416991,  -0.02964338],
            [-0.86669085,  -0.36370215,  -0.02981743],
            [-0.00008682,  -0.91448211,   0.02996010]]

water = np.array([[0.000000000000000, 0.000000000000000, 0.000000000000000],
                           [0.957840000000000, 0.000000000000000, 0.000000000000000],
                           [-0.23995350000000, 0.927297000000000, 0.000000000000000]])*ang2bohr
print(np.flip(np.array(water), axis=0))
import numpy as np
r = 1.84099353909
beta = np.deg2rad(73.16737677908)
monomer = np.flip([[0, 0, 0],
            [r*np.sin(beta), 0, r*np.cos(beta)],
            [-1/2*r*np.sin(beta), np.sqrt(3)/2*r*np.sin(beta), r*np.cos(beta)],
            [-1/2*r*np.sin(beta), -np.sqrt(3)/2*r*np.sin(beta), r*np.cos(beta)]], 0)/ang2bohr
print(monomer)
r = 1.827793856
beta = np.deg2rad(90)
monomer4 = [[r*np.sin(beta), 0, r*np.cos(beta)],
            [-1/2*r*np.sin(beta), np.sqrt(3)/2*r*np.sin(beta), r*np.cos(beta)],
            [-1/2*r*np.sin(beta), -np.sqrt(3)/2*r*np.sin(beta), r*np.cos(beta)],
            [0, 0, 0]]


import numpy as np
np.save('trimer_coords', np.array(trimer)*ang2bohr)
np.save('tetramer_coords', np.array(tetramer))
np.save('dimer_coords', np.array(dimer2))
print(dimer2)
np.save('monomer_coords', np.array(monomer)*ang2bohr)
np.save('monomer_coords_from_Anne', np.array(monomer2)*ang2bohr)
np.save('water_coords', np.array(water))

a = np.loadtxt('roh_morse.dat', usecols=(0, 3))

np.save('wvfns/free_oh_wvfn', a)


def dist(coords_initial, bonds):
    cd1 = coords_initial[:, tuple(x[0] for x in np.array(bonds)-1)]
    cd2 = coords_initial[:, tuple(x[1] for x in np.array(bonds)-1)]
    dists = np.linalg.norm(cd2-cd1, axis=2)
    return dists


trimer = [[-0.00032173,  -1.66883417,  -0.56979199],
          [0.86680697,  -0.36416991,  -0.02964338],
          [-0.86669085,  -0.36370215,  -0.02981743],
          [-0.00008682,  -0.91448211,   0.02996010],
          [2.55870573,   0.78106280,  -0.75977325],
          [2.71587410,   0.37986377,   0.72158263],
          [2.07903488,   0.45956205,   0.00727991],
          [-2.55611419,   0.78549017,  -0.75941312],
          [-2.71764621,   0.37748843,   0.71971598],
          [-2.07898673,   0.45950719,   0.00731627]]
from ProtWaterPES.ProtonatedWaterPot import Potential
from scipy import optimize

pot = Potential(7)
blah = [[-3.02335769e+00,  1.47088648e+00, -7.54653891e-01],
  [-3.20568026e+00, -4.82187122e-01,  1.47684554e+00],
  [-3.54108573e-04,  3.42610666e-04,  1.19594149e-01],
  [-2.25285171e+00,  2.81378090e-04, -2.74881609e-04],
  [ 3.02279864e+00, -1.47210751e+00, -7.50958455e-01],
  [ 3.20473079e+00,  4.85583323e-01,  1.47652817e+00],
  [ 2.25219663e+00,  9.32069234e-05,  2.19029686e-04]]
# blah = [
#   [-6.07981586075849e-4, -3.153639528717164, -1.0767508091055056],
#   [1.6380277762167061, -0.6881813927296154, -5.6017869608209064e-2],
#   [-1.6378083412191147, -0.6872974544375605, -5.6346776440200176e-2],
#   [-1.6406602214000937e-4, -1.7281207337698974, 5.661638366640054e-2],
#   [4.835253063210652, 1.475994778133353, -1.4357633593168264],
#   [5.132258237964502, 0.7178384899678348, 1.363593546987171],
#   [3.928806526744203, 0.8684464117715744, 1.375703611192439e-2],
#   [-4.83035576236964, 1.4843612948857374, -1.435082812247565],
#   [-5.135607040527212, 0.7133497479149663, 1.3600660897166383],
#   [-3.9287155364313024, 0.8683427413963775, 1.3825746553815783e-2]
#   ]
har2wave = 219474.6
a = np.array([blah]*1)
print(a.shape)
# print(pot.get_potential(a.flatten()))
# result = optimize.minimize(pot.get_potential, a, method='Nelder-Mead')
# print(result.success)
# print(result.x.reshape(1, 7, 3))
# print(result.nit)
# print(result.nfev)
# print(result.fun*har2wave)
# result = optimize.minimize(pot.get_potential, result.x.reshape(1, 7, 3), method='CG')
# print(result.x.reshape(1, 7, 3))
# print(result.fun*har2wave)
# print(result.success)
# print(result.nit)
# print(result.nfev)
# pot1 = pot.get_potential(a)
print(-0.09129961)

# pot = Potential(13)
# blah = [
#   [-0.5878248979565733, -1.7237244938108292, -0.38143405619369936],
#   [1.7970198837120954, 0.35329941680778476, -0.38284978231448524],
#   [-1.1956714631008178, 1.378110555357375, -0.37926536869855637],
#   [4.785107800993636e-3, 3.0993965087824644e-3, -0.892470821247383],
#   [-3.7150042547095916, 4.654253072987043, -1.0263599013895497],
#   [-4.0370254349286245, 3.7625585323343946, 1.7121821411279212],
#   [-2.9309499125129603, 3.667340675325741, 0.2778683718240339],
#   [-2.229947672890821, -5.520969875128531, -1.0221629141530622],
#   [-1.2360753572207388, -5.384569915884574, 1.6964500577568442],
#   [-1.7234967629155504, -4.363307172770977, 0.279015227711808],
#   [5.287986259319347, 1.6441144706805584, 1.6871770393824768],
#   [5.90766283125719, 0.8207628201880636, -1.021057405472895],
#   [4.650221077738496, 0.6938856633176271, 0.2799703708842389]
#   ]
a = np.array([blah]*1)
print(pot.get_potential(a))
pot1 = pot.get_potential(a)
result = optimize.minimize(pot.get_potential, a, method='CG')
while result.fun < pot1:
    print(result.fun*har2wave)
    pot1 = result.fun
    x = result.x.reshape(1, 7, 3)
    result = optimize.minimize(pot.get_potential, x, method='Nelder-Mead')
    x = result.x.reshape(1, 7, 3)
    pot1 = result.fun
    result = optimize.minimize(pot.get_potential, x, method='CG')
print(result.x.reshape(1, 7, 3))

# a = np.array([monomer]*3)*ang2bohr
# b = np.array([dimer2]*3)
# c = np.array([monomer3]*3)
# d = np.array([monomer4]*3)
# pot = Potential(7, True)
# print(pot.get_potential(a))
# print(pot.get_potential(b))
# har2wave = 219474.6
# print(pot.get_potential(b)*har2wave)
# print(pot.get_potential(np.flip(c, 1)))
# print(pot.get_potential(d))